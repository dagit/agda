(agda2-status-action "")
(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-info-action "*Type-checking*" "Checking Long (Long.agda).\n" t)
(agda2-info-action "*Type-checking*" "Finished Long.\n" t)
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?0 : Maybe Nat\n?1 : Maybe Nat\n?2 : Nat\n?3 : D ?2\n?4 : D z\n?5 : Set\n?6 : Maybe ?5\n" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6)))
(agda2-status-action "")
(agda2-typechecking-emacs (1 7 (keyword) nil) (8 12 (module) nil ("Long.agda" . 1)) (13 18 (keyword) nil) (20 24 (keyword) nil) (25 28 (datatype) nil ("Long.agda" . 25)) (29 30 (symbol) nil) (31 34 (primitivetype) nil) (35 40 (keyword) nil) (43 44 (inductiveconstructor) nil ("Long.agda" . 43)) (45 46 (symbol) nil) (47 50 (datatype) nil ("Long.agda" . 25)) (53 54 (inductiveconstructor) nil ("Long.agda" . 53)) (55 56 (symbol) nil) (57 58 (symbol) nil) (58 59 (bound) nil ("Long.agda" . 58)) (60 61 (symbol) nil) (62 65 (datatype) nil ("Long.agda" . 25)) (65 66 (symbol) nil) (67 68 (symbol) nil) (69 72 (datatype) nil ("Long.agda" . 25)) (74 78 (keyword) nil) (79 82 (datatype) nil ("Long.agda" . 79)) (83 84 (symbol) nil) (85 88 (primitivetype) nil) (89 94 (keyword) nil) (97 100 (inductiveconstructor) nil ("Long.agda" . 97)) (101 102 (symbol) nil) (103 104 (symbol) nil) (104 105 (bound) nil ("Long.agda" . 104)) (106 107 (symbol) nil) (108 111 (datatype) nil ("Long.agda" . 25)) (111 112 (symbol) nil) (113 114 (symbol) nil) (115 118 (datatype) nil ("Long.agda" . 79)) (121 126 (inductiveconstructor) nil ("Long.agda" . 121)) (127 128 (symbol) nil) (129 132 (datatype) nil ("Long.agda" . 79)) (134 138 (keyword) nil) (139 144 (datatype) nil ("Long.agda" . 139)) (145 146 (symbol) nil) (146 147 (bound) nil ("Long.agda" . 146)) (148 149 (symbol) nil) (150 153 (primitivetype) nil) (153 154 (symbol) nil) (155 156 (symbol) nil) (157 160 (primitivetype) nil) (161 166 (keyword) nil) (169 173 (inductiveconstructor) nil ("Long.agda" . 169)) (177 178 (symbol) nil) (179 180 (bound) nil ("Long.agda" . 146)) (181 182 (symbol) nil) (183 188 (datatype) nil ("Long.agda" . 139)) (189 190 (bound) nil ("Long.agda" . 146)) (193 200 (inductiveconstructor) nil ("Long.agda" . 193)) (201 202 (symbol) nil) (203 208 (datatype) nil ("Long.agda" . 139)) (209 210 (bound) nil ("Long.agda" . 146)) (212 220 (keyword) nil) (224 226 (function) nil ("Long.agda" . 224)) (227 228 (symbol) nil) (229 232 (datatype) nil ("Long.agda" . 25)) (233 234 (symbol) nil) (235 238 (datatype) nil ("Long.agda" . 25)) (241 243 (function) nil ("Long.agda" . 224)) (244 245 (symbol) nil) (246 247 (inductiveconstructor) nil ("Long.agda" . 53)) (249 253 (function) nil ("Long.agda" . 249)) (254 255 (symbol) nil) (256 259 (datatype) nil ("Long.agda" . 79)) (260 261 (symbol) nil) (262 267 (datatype) nil ("Long.agda" . 139)) (268 271 (datatype) nil ("Long.agda" . 25)) (272 276 (function) nil ("Long.agda" . 249)) (277 278 (symbol) nil) (278 281 (inductiveconstructor) nil ("Long.agda" . 97)) (282 283 (bound) nil ("Long.agda" . 282)) (283 284 (symbol) nil) (285 286 (symbol) nil) (287 288 (symbol) nil) (289 293 (function) nil ("Long.agda" . 249)) (294 299 (inductiveconstructor) nil ("Long.agda" . 121)) (302 303 (symbol) nil) (304 305 (symbol) nil) (307 311 (keyword) nil) (312 313 (datatype) nil ("Long.agda" . 312)) (314 315 (symbol) nil) (316 319 (datatype) nil ("Long.agda" . 25)) (320 321 (symbol) nil) (322 325 (primitivetype) nil) (326 331 (keyword) nil) (334 335 (inductiveconstructor) nil ("Long.agda" . 334)) (336 337 (symbol) nil) (338 339 (datatype) nil ("Long.agda" . 312)) (340 341 (inductiveconstructor) nil ("Long.agda" . 43)) (343 346 (function) nil ("Long.agda" . 343)) (347 348 (symbol) nil) (349 350 (datatype) nil ("Long.agda" . 312)) (351 355 (symbol) nil) (356 359 (function) nil ("Long.agda" . 343)) (360 361 (symbol) nil) (362 366 (symbol) nil) (368 371 (function) nil ("Long.agda" . 368)) (372 373 (symbol) nil) (374 375 (datatype) nil ("Long.agda" . 312)) (376 377 (inductiveconstructor) nil ("Long.agda" . 43)) (378 381 (function) nil ("Long.agda" . 368)) (382 383 (symbol) nil) (384 388 (symbol) nil) (390 393 (function) nil ("Long.agda" . 390)) (394 395 (symbol) nil) (396 401 (datatype) nil ("Long.agda" . 139)) (402 406 (symbol) nil) (407 410 (function) nil ("Long.agda" . 390)) (411 412 (symbol) nil) (413 417 (symbol) nil))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6)))
(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-info-action "*Type-checking*" "Checking Long (Long.agda).\n" t)
(agda2-info-action "*Type-checking*" "Finished Long.\n" t)
(agda2-status-action "")
(agda2-info-action "*Error*" "You can only compile modules without unsolved metavariables\nor termination checking problems.\n" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6)))
(agda2-status-action "")
(agda2-info-action "*Constraints*" "" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6)))
(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-info-action "*Type-checking*" "Checking Long (Long.agda).\n" t)
(agda2-info-action "*Type-checking*" "Finished Long.\n" t)
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?0 : Maybe Nat\n?1 : Maybe Nat\n?2 : Nat\n?3 : D ?2\n?4 : D z\n?5 : Set\n?6 : Maybe ?5\n" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6)))
(agda2-status-action "")
(agda2-info-action "*Constraints*" "" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6)))
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?0 : Maybe Nat\n?1 : Maybe Nat\n?2 : Nat\n?3 : D ?2\n?4 : D z\n?5 : Set\n?6 : Maybe ?5\n" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6)))
((last . 2) . (agda2-make-case-action '("eval (val z) = ?" "eval (val (s n)) = ?")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6)))
(agda2-give-action 0 "Just ?")
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?1 : Maybe Nat\n?2 : Nat\n?3 : D ?2\n?4 : D z\n?5 : Set\n?6 : Maybe ?5\n?7 : Nat\n" nil)
((last . 1) . (agda2-goals-action '(7 1 2 3 4 5 6)))
(agda2-status-action "")
(agda2-info-action "*Intro*" "Don't know which constructor to introduce of z or s" nil)
((last . 1) . (agda2-goals-action '(7 1 2 3 4 5 6)))
(agda2-give-action 4 "d")
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?1 : Maybe Nat\n?2 : Nat\n?3 : D ?2\n?5 : Set\n?6 : Maybe ?5\n?7 : Nat\n" nil)
((last . 1) . (agda2-goals-action '(7 1 2 3 5 6)))
(agda2-status-action "")
(agda2-info-action "*Inferred Type*" "Nat → Set" nil)
((last . 1) . (agda2-goals-action '(7 1 2 3 5 6)))
(agda2-status-action "")
(agda2-info-action "*Context*" "n : Nat" nil)
((last . 1) . (agda2-goals-action '(7 1 2 3 5 6)))
(agda2-status-action "")
(agda2-info-action "*Current Goal*" "Nat" nil)
((last . 1) . (agda2-goals-action '(7 1 2 3 5 6)))
(agda2-status-action "")
(agda2-info-action "*Goal type etc.*" "Goal: Nat\n————————————————————————————————————————————————————————————\nn : Nat" nil)
((last . 1) . (agda2-goals-action '(7 1 2 3 5 6)))
(agda2-status-action "")
(agda2-info-action "*Goal type etc.*" "Goal: Nat\nHave: Nat\n————————————————————————————————————————————————————————————\nn : Nat" nil)
((last . 1) . (agda2-goals-action '(7 1 2 3 5 6)))
(agda2-status-action "")
(agda2-info-action "*Module contents*" "Modules\nNames\n  d : D z" nil)
((last . 1) . (agda2-goals-action '(7 1 2 3 5 6)))
(agda2-give-action 3 "d")
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?1 : Maybe Nat\n?2 : Nat\n?5 : Set\n?6 : Maybe ?5\n?7 : Nat\n" nil)
((last . 1) . (agda2-goals-action '(7 1 2 5 6)))
(agda2-give-action 6 "Just ?")
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?1 : Maybe Nat\n?2 : Nat\n?5 : Set\n?7 : Nat\n?8 : ?5\n" nil)
((last . 1) . (agda2-goals-action '(7 1 2 5 8)))
(agda2-status-action "")
(agda2-info-action "*Normal Form*" "s′ z" nil)
((last . 1) . (agda2-goals-action '(7 1 2 5 8)))
(agda2-status-action "")
(agda2-info-action "*Normal Form*" "s z" nil)
((last . 1) . (agda2-goals-action '(7 1 2 5 8)))
(agda2-give-action 8 "d")
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?1 : Maybe Nat\n?2 : Nat\n?5 : Set\n?7 : Nat\n" nil)
((last . 1) . (agda2-goals-action '(7 1 2 5)))
((last . 2) . (agda2-solveAll-action '(2 "z" 5 "D z")))
((last . 1) . (agda2-goals-action '(7 1 2 5)))
(agda2-info-action "*Error*" "1,1-4\nNat !=< Maybe Nat of type Set\nwhen checking that the expression s z has type Maybe Nat" nil)
(agda2-status-action "")
(agda2-status-action "")
(agda2-info-action "*Normal Form*" "?1" nil)
((last . 1) . (agda2-goals-action '(7 1 2 5)))
(agda2-give-action 1 "Nothing")
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?2 : Nat\n?5 : Set\n?7 : Nat\n" nil)
((last . 1) . (agda2-goals-action '(7 2 5)))
(agda2-give-action 7 "n")
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?2 : Nat\n?5 : Set\n" nil)
((last . 1) . (agda2-goals-action '(2 5)))
(agda2-status-action "")
(agda2-info-action "*Inferred Type*" "Maybe Nat" nil)
((last . 1) . (agda2-goals-action '(2 5)))
(agda2-status-action "")
(agda2-info-action "*Normal Form*" "Nothing" nil)
((last . 1) . (agda2-goals-action '(2 5)))
(agda2-info-action "*Error*" "1,4-5\nNot in scope:\n  n at 1,4-5\nwhen scope checking n" nil)
(agda2-status-action "")
(agda2-status-action "")
(agda2-info-action "*Normal Form*" "s z" nil)
((last . 1) . (agda2-goals-action '(2 5)))
(agda2-status-action "")
(agda2-info-action "*Module contents*" "Modules\nNames\n  d : D z" nil)
((last . 1) . (agda2-goals-action '(2 5)))
(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-info-action "*Type-checking*" "Checking Long (Long.agda).\n" t)
(agda2-info-action "*Type-checking*" "Finished Long.\n" t)
(agda2-status-action "")
(agda2-info-action "*Error*" "You can only compile modules without unsolved metavariables\nor termination checking problems.\n" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6)))
(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-info-action "*Type-checking*" "Checking Long (Long.agda).\n" t)
(agda2-info-action "*Type-checking*" "Finished Long.\n" t)
(agda2-status-action "")
(agda2-info-action "*Error*" "You can only compile modules without unsolved metavariables\nor termination checking problems.\n" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6)))
