(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-info-action "*Type-checking*" "Checking ExtendedLambdaCase (ExtendedLambdaCase.agda).\n" t)
(agda2-info-action "*Type-checking*" "Finished ExtendedLambdaCase.\n" t)
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?0 : Bool\n?1 : Bool\n?2 : Bool\n" nil)
((last . 1) . (agda2-goals-action '(0 1 2)))
((last . 2) . (agda2-make-case-action-extendlam '("true → ?" "false → ?")))
((last . 1) . (agda2-goals-action '(0 1 2)))
(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-info-action "*Type-checking*" "Checking ExtendedLambdaCase (ExtendedLambdaCase.agda).\n" t)
(agda2-info-action "*Type-checking*" "Finished ExtendedLambdaCase.\n" t)
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?0 : Bool\n?1 : Bool\n?2 : Bool\n" nil)
((last . 1) . (agda2-goals-action '(0 1 2)))
(agda2-status-action "ShowImplicit")
((last . 1) . (agda2-goals-action '(0 1 2)))
((last . 2) . (agda2-make-case-action-extendlam '("true → ?" "false → ?")))
((last . 1) . (agda2-goals-action '(0 1 2)))
((last . 2) . (agda2-make-case-action-extendlam '("t true → ?" "t false → ?")))
((last . 1) . (agda2-goals-action '(0 1 2)))
((last . 2) . (agda2-make-case-action-extendlam '("x true z → ?" "x false z → ?")))
((last . 1) . (agda2-goals-action '(0 1 2)))
