------------------------------------------------------------------------
-- Release notes for Agda 2 version 2.2.6
------------------------------------------------------------------------

Important changes since 2.2.4:

Language
--------

* Universe polymoprhism (experimental extension)

  To enable universe polymorphism give the flag --universe-polyorphism
  on the command line, as an OPTIONS pragma (recommended) or set it in
  the emacs mode options.

  When universe polymorphism is enabled Set takes an argument which is
  the universe level. For instance, the type of universe polymorphic identity
  is

    id : {i : Level}{A : Set i} -> A -> A

  The type Level is isomorphic to the unary natural numbers and should be
  specified using the BUILTINs LEVEL, LEVELZERO, and LEVELSUC:

    data Level : Set where
      zero : Level
      suc  : Level -> Level
  
    {-# BUILTIN LEVEL     Level #-}
    {-# BUILTIN LEVELZERO zero  #-}
    {-# BUILTIN LEVELSUC  suc   #-}

  There is an additional BUILTIN LEVELMAX for taking the maximum of two
  levels:

    max : Level -> Level -> Level
    max  zero    m      = m
    max (suc n)  zero   = suc n
    max (suc n) (suc m) = suc (max n m)

    {-# BUILTIN LEVELMAX max #-}

  The non-polymorphic universe levels Set, Set₁, .. are sugar for Set zero,
  Set (suc zero), ..

  At present there is no way to lift types from one level to another, that
  is, there is no function

    lift : {i : Level} -> Set i -> Set (suc i)

  This is likely to change at some point.

* Multiple constructors, record fields, postulates or primitives can
  now be declared using a single type signature:

    data Bool : Set where
      false true : Bool

    postulate
      A B : Set

* Record fields can be implicit:

    record R : Set₁ where
      field
        {A}         : Set
        f           : A → A
        {B C} D {E} : Set
        g           : B → C → E

  Currently this only affects printing of record values; implicit
  fields are not printed by default.

* BUILTIN hooks for equality

  The datatype

    data _≡_ {A : Set}(x : A) : A → Set where
      refl : x ≡ x

  can be specified as the builtin equality type using the pragmas

    {-# BUILTIN EQUALITY _≡_ #-}
    {-# BUILTIN REFL refl #-}

  The builtin equality is used for the new rewrite construct and
  the primTrustMe primitive described below.

* New rewrite construct

  If eqn : a ≡ b, where _≡_ is the builtin equality (see above) you can now
  write

    f ps rewrite eqn = rhs

  for

    f ps with a | eqn
    ... | ._ | refl = rhs

  The rewrite construct has the effect of rewriting the goal and the
  context by the given equation (left to right).

  You can rewrite by several equations (in sequence) by separating them
  by | (bar):

    f ps rewrite eqn₁ | eqn₂ | .. = rhs

  It is also possible to add with clauses after rewriting:

    f ps rewrite eqns with e
    ... | p = rhs

  Note that pattern matching happens before rewriting--if you want to rewrite
  and then do pattern matching you can use a with after the rewrite.

  See test/succeed/Rewrite.agda for some example uses.

* A new primitive, primTrustMe, has been added:

    primTrustMe : {A : Set} {x y : A} → x ≡ y

  Where _≡_ is the builtin equality (see BUILTIN hooks for equality,
  above).

  If x and y are definitionally equal, then
  primTrustMe {x = x} {y = y} reduces to refl.

  Note that the compiler replaces all uses of primTrustMe with the
  REFL builtin, without any check for definitional equality. Incorrect
  uses of primTrustMe can potentially lead to segfaults or similar
  problems.

  For an example of the use of primTrustMe, see Data.String in version
  0.3 of the standard library, where it is used to implement decidable
  equality on strings from the primitive boolean equality.

* The horizontal tab character (U+0009) is no longer treated as white
  space.

* Line pragmas are no longer supported.

* The --include-path flag can no longer be used as a pragma.

* The experimental and incomplete support for proof irrelevance has
  been disabled.

Tools
-----

* Syntax highlighting files for Emacs (.agda.el) are no longer used.
  The --emacs flag has been removed.

* If a file F is loaded, and this file defines the module M, it is now
  an error if F is not the file which defines M according to the
  include path.

  Note that the command-line tool and the Emacs mode define the
  meaning of relative include paths differently: the command-line tool
  interprets them relative to the current working directory, whereas
  the Emacs mode interprets them relative to the root directory of the
  current project. (As an example, if the module A.B.C is loaded from
  the file <some-path>/A/B/C.agda, then the root directory is
  <some-path>.)

* It is now an error if there are several files on the include path
  which match a given module name.

* Interface files are now relocatable. You can move around source
  trees as long as the include path is updated in a corresponding way.
  Note that a module M may be re-typechecked if its time stamp is
  strictly newer than that of the corresponding interface file
  (M.agdai).

* Type-checking is no longer done when an up-to-date interface exists.
  (Previously the initial module was always type-checked.)

* The default directory for MAlonzo output is now the project's root
  directory.

* Emacs mode: C-c C-x C-d no longer resets the type checking state.
  C-c C-x C-r can be used for a more complete reset. C-c C-x C-s
  (which used to reload the syntax highlighting information) has been
  removed. C-c C-l can be used instead.

* The Emacs mode now displays "Checked" in the mode line if the
  current file type checked successfully without any warnings.

* The Emacs mode used to define some "abbrevs", unless the user
  explicitly turned this feature off. Now the default is /not/ to add
  any abbrevs. The old default can be obtained by customising
  agda2-mode-abbrevs-use-defaults (a customisation buffer can be
  obtained by typing M-x customize-group agda2 RET after an Agda file
  has been loaded).
