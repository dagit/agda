------------------------------------------------------------------------
-- Release notes for Agda 2 version 2.3.2
------------------------------------------------------------------------

Important changes since 2.3.0:

Language
========

* New: Built-in irrelevance axiom.

    postulate
      .irrAxiom : ∀ {a}{A : Set a} → .A → A
    {-# BUILTIN IRRAXIOM irrAxiom #-}

* Irrelevant projections require irrelevance axiom.

  Record with irrelevant fields now require the built-in IRRAXIOM.

    record Squash {a}(A : Set a) : Set a where
      constructor squash
      field
        .unsquash : A

  This will produce an irrelevant projection

    .unsquash : ∀ {a}{A : Set a} → Squash A → A
    unsquash (squash x) = irrAxiom x

  Thus, Agda will check for the built-in irrAxiom to be defined.

Compiler backends
=================

Tools
=====

Interface
=========

* The Emacs interface has been made asynchronous: One has now the
possibility to use Emacs while waiting for ioTCM computations (eg,
type-checking). Also, terms are highlighted on the fly (in the fashion
of Proof-General).
  New faces have been introduced in the following face groups:

    - Default setting:
        agda2-highlight-typechecks-face
        agda2-highlight-typechecked-face

    - (Approximation of) Conor McBride's colour scheme:
        agda2-highlight-typechecks-face
        agda2-highlight-typechecked-face

    - Simplified highlighting and default font-lock faces:
        font-lock-type-face
        font-lock-preprocessor-face
        
  Highlighting annotations are printed on-the-fly (as single line
S-expressions) during a type-checking computation wrapped into `ioTCM'.
They are filtered away from the *ghci* buffer, and terms are highlighted
on-the-fly; Using the first of the above faces while being type-checked,
and the second one afterwards. When getting the ghci prompt, responses
are read and executed as before.
  
  Asynchronicity gives the user the possibility to edit the .agda file
during type-checking. If he/she does so, then incremental highlighting is
interrupted (since the file that is being type-checked / which the
highlighting annotations refer to is prior to the modifications).
